import matplotlib.pyplot as plt
import numpy as np



class HyperTunerResults:
    M = [2, 5, 10, 20, 40]
    m = [1, 2, 3, 5, 7]

    RESULTS_NON = {
        'USAir': {
            'AUC_MEAN': [87.708482, 93.17016800000002, 94.581258, 94.86494400000001, 95.109246, 92.15446, 94.66002,
                         94.989766, 95.253202, 95.797882, 92.68155999999999, 94.857158, 95.43476000000001,
                         95.44010399999999, 95.67462, 93.66500199999999, 94.90298800000001, 95.387592,
                         95.84638199999999, 95.811232, 94.06417, 95.132608, 95.395604, 95.59674199999999, 95.666606],
            'AP_MEAN': [87.671524, 93.447574, 94.711952, 94.867324, 95.223612, 91.782318, 94.890086, 95.13177599999999,
                        95.59570199999999, 95.96548399999999, 92.95707399999999, 95.174092, 95.716194, 95.706276,
                        95.89014999999999, 94.080936, 95.185524, 95.668196, 95.937286, 96.029708, 94.361242, 95.413412,
                        95.64663399999999, 95.85685000000001, 95.95246800000001],
            'Time_MEAN': [36.666000000000004, 41.10600000000001, 36.022000000000006, 35.67999999999999,
                          37.248000000000005, 35.938, 37.104, 38.128, 38.666, 39.638, 36.010000000000005,
                          36.82000000000001, 38.15, 39.646, 41.192, 36.358000000000004, 37.959999999999994, 39.316,
                          41.19199999999999, 45.14, 36.797999999999995, 38.492, 40.775999999999996, 43.181999999999995,
                          45.519999999999996]},
        'NS': {
            'AUC_MEAN': [97.387312, 98.545874, 98.72835599999999, 98.71543599999998, 98.660824, 98.201156,
                         98.57064799999999, 98.508576, 98.53761399999999, 98.461424, 98.31198, 98.515368, 98.56812,
                         98.462092, 98.01001599999998, 98.40827800000001, 98.475814, 98.317838, 98.482606,
                         98.03479200000001, 98.508312, 98.418402, 98.369918, 98.396692, 97.975784],
            'AP_MEAN': [97.91377800000001, 98.734914, 98.87434400000001, 98.80693, 98.77835400000001, 98.457654,
                        98.776404, 98.68465599999999, 98.69871400000001, 98.65177200000001, 98.52811200000001,
                        98.69053600000001, 98.74892600000001, 98.699546, 98.282754, 98.664652, 98.683294, 98.552052,
                        98.70348, 98.305684, 98.703772, 98.606678, 98.61528799999999, 98.55680600000001, 98.266946],
            'Time_MEAN': [45.908, 42.89, 45.013999999999996, 46.998, 45.922000000000004, 43.760000000000005, 46.47,
                          47.15599999999999, 46.266000000000005, 44.684000000000005, 47.426, 43.362, 44.486000000000004,
                          46.142, 45.68600000000001, 43.15, 43.564, 44.188, 44.932, 45.46, 43.342, 44.202000000000005,
                          44.136, 48.779999999999994, 44.674]},
        'Router': {
            'AUC_MEAN': [86.98647000000001, 91.766682, 92.357044, 92.278198, 92.350336, 89.689138, 92.4,
                         92.72463200000001, 93.26164399999999, 92.8309, 91.35375400000001, 93.130472, 93.76955199999999,
                         93.73060999999998, 93.631538, 92.106548, 93.883214, 93.82110800000001, 94.235624,
                         93.96372600000001, 91.434238, 93.631694, 93.66026200000002, 94.362956, 94.009062],
            'AP_MEAN': [84.171608, 91.09812600000001, 91.71803400000002, 91.410988, 91.534266, 88.439514,
                        92.14817400000001, 92.77025799999998, 93.49509599999999, 93.146052, 90.95518799999999,
                        93.202962, 93.82970799999998, 93.956416, 93.820272, 91.81910400000001, 93.630558, 93.971468,
                        94.36790400000001, 94.104214, 91.15484799999999, 93.60120400000001, 93.74282600000001,
                        94.533874, 94.052424],
            'Time_MEAN': [104.59400000000001, 106.168, 102.17, 106.024, 105.67999999999999, 103.63600000000001, 100.626,
                          102.14000000000001, 105.744, 103.016, 110.77000000000001, 100.388, 101.304, 109.13,
                          110.35799999999999, 102.83600000000001, 117.08399999999999, 116.174, 105.096, 106.59, 100.276,
                          102.76199999999999, 113.702, 112.082, 110.46]},
        'Celegans': {
            'AUC_MEAN': [68.170362, 77.942614, 81.92636999999999, 84.924008, 85.52974, 73.203772, 81.87003200000001,
                         84.053194, 86.163858, 88.056598, 74.433356, 83.051794, 85.601796, 87.57970400000002, 87.76531,
                         77.33033400000001, 84.351036, 86.813256, 87.95921, 87.756134, 78.925232, 84.795178, 87.055638,
                         87.743472, 87.4631],
            'AP_MEAN': [69.16938799999998, 78.10317, 80.48595, 84.172992, 84.49543200000001, 75.110856,
                        82.71117000000001, 84.31983, 86.37439800000001, 87.728274, 77.446204, 83.13271399999999,
                        85.349234, 87.22228399999999, 87.485752, 78.485668, 84.58795799999999, 86.092708,
                        87.75296200000001, 86.779482, 79.83641399999999, 85.001138, 86.760082, 87.498386, 86.501766],
            'Time_MEAN': [36.495999999999995, 36.896, 36.302, 35.088, 35.980000000000004, 35.774, 37.81, 38.29, 38.3,
                          39.968, 37.096000000000004, 38.668, 39.156, 40.506, 40.378, 34.528, 35.494,
                          36.474000000000004, 41.512, 43.974, 38.054, 40.204, 40.751999999999995, 43.124, 47.964]},
        'Power': {
            'AUC_MEAN': [69.65087199999999, 74.291184, 76.54756200000001, 76.9651, 77.03403800000001, 74.971046,
                         79.93195599999999, 81.57092, 82.10278600000001, 81.460272, 76.66156199999999, 81.734408,
                         84.25653, 85.34193400000001, 85.675242, 79.039772, 85.52566200000001, 87.10970400000001,
                         87.83281, 88.93233000000001, 81.21852, 86.60782, 87.865876, 88.92438, 90.094338],
            'AP_MEAN': [71.54778, 77.32500999999999, 79.20682, 79.85906, 80.003164, 78.63056, 82.731374,
                        84.273696, 84.69057, 84.165496, 80.50766999999999, 84.524248, 86.64360400000001,
                        87.50075799999999, 87.534014, 82.364304, 87.508004, 88.72514199999999, 89.04593,
                        89.83503, 84.161112, 88.269368, 89.01288, 89.841046, 90.56678200000002],
            'Time_MEAN': [111.902, 113.444, 115.60999999999999, 116.856, 110.7, 111.21200000000002,
                          116.23200000000001, 113.95600000000002, 114.78, 108.84, 106.65400000000002,
                          108.46600000000001, 110.81599999999999, 112.918, 109.75, 105.59200000000001,
                          108.65799999999999, 115.018, 108.324, 112.532, 116.91399999999999, 108.10799999999999,
                          108.652, 115.65, 117.14200000000001]},
        'PB': {
            'AUC_MEAN': [82.40804, 89.881286, 92.511698, 93.805252, 94.12968, 86.906674, 91.945686, 93.504558,
                         94.174048, 94.48163600000001, 88.00953000000001, 92.17773, 93.896766, 94.227728, 94.41625,
                         89.75499599999999, 92.730362, 93.883228, 94.10182, 94.23702999999999, 90.51272399999999,
                         92.90072599999999, 93.809862, 93.955692, 93.961308],
            'AP_MEAN': [81.113444, 88.624364, 91.69407799999999, 93.184762, 93.620654, 87.16384400000001, 91.517512,
                        93.157676, 93.825108, 94.122896, 88.13347399999999, 91.91782, 93.55415, 93.91217000000002,
                        94.04478200000001, 89.76369000000001, 92.51571400000002, 93.68372, 93.864222, 93.970428,
                        90.57123399999999, 92.81403, 93.62886, 93.839334, 93.855084],
            'Time_MEAN': [289.274, 294.66600000000005, 298.664, 302.95400000000006, 312.50200000000007, 297.57, 296.598,
                          302.536, 316.346, 341.09799999999996, 289.92, 300.122, 314.702, 343.13199999999995, 385.014,
                          298.46400000000006, 303.622, 328.358, 377.654, 480.25, 299.312, 317.372, 352.77, 422.05,
                          540.976]},
        'Ecoli': {
            'AUC_MEAN': [89.288788, 94.7791, 96.255416, 96.54638, 96.676854, 92.337638, 95.38628199999998, 96.088398,
                         96.19748999999999, 95.72153399999999, 93.25132599999999, 95.84698399999999, 96.38188199999999,
                         96.454012, 96.25661399999998, 93.963686, 95.80052, 96.28798400000001, 96.34735200000001,
                         96.30854199999999, 94.188548, 95.69506200000001, 95.957808, 96.19456, 96.11286600000001],
            'AP_MEAN': [90.490426, 95.52052599999999, 96.86961600000001, 97.11119399999998, 97.244794, 93.700728,
                        96.261088, 96.889064, 97.045556, 96.75398, 94.482186, 96.643746, 97.119488, 97.182358,
                        97.050028, 95.166814, 96.695218, 97.03646799999999, 97.169958, 97.095218, 95.42144, 96.693304,
                        96.925792, 97.07235999999999, 96.99414399999999],
            'Time_MEAN': [260.996, 256.784, 253.87199999999999, 259.71, 288.49, 255.31, 255.756, 254.666, 272.286,
                          291.63199999999995, 253.76999999999998, 251.47799999999998, 268.092, 283.586, 325.258,
                          254.156, 263.61199999999997, 286.492, 323.168, 381.78000000000003, 259.698, 271.744,
                          300.55400000000003, 360.892, 433.40999999999997]},
        'Yeast': {
            'AUC_MEAN': [91.81156200000001, 95.614852, 96.569324, 96.918116, 96.891854, 93.623118, 96.48110799999999,
                         97.302358, 97.530796, 97.424008, 94.03153599999999, 96.576088, 97.330378, 97.40537600000002,
                         97.345136, 94.539422, 96.893664, 97.273674, 97.250012, 96.98480599999999, 94.64700200000001,
                         96.840976, 97.13326599999999, 96.98659, 97.020132],
            'AP_MEAN': [93.169892, 96.449804, 97.17621999999999, 97.38542799999999, 97.50845799999999, 95.326772,
                        97.29293600000001, 97.884612, 98.03794, 97.94751, 95.623442, 97.364538, 97.87380399999999,
                        98.003018, 97.88716399999998, 96.00117799999998, 97.551266, 97.850732, 97.80259600000001,
                        97.599198, 96.061154, 97.54845399999999, 97.71452400000001, 97.579784, 97.554212],
            'Time_MEAN': [196.252, 204.61, 205.734, 192.358, 196.528, 191.358, 192.28, 199.508, 200.368,
                          207.12599999999998, 193.186, 192.27999999999997, 199.2, 205.708, 214.3, 191.08599999999998,
                          199.344, 206.58199999999997, 215.03799999999995, 232.73200000000003, 196.99200000000002,
                          202.31199999999995, 211.504, 229.108, 246.03199999999998]}
    }

    SEAL = {
        'USAir': {'AUC': [95.8693, 94.0437, 95.40762, 96.39107, 94.94704],
                  'AP': [96.26809, 94.30692, 95.80011, 96.00082, 95.16557],
                  'Time taken (per run)': [51.02, 50.55, 49.85, 49.21, 48.64], 'AUC Mean': [95.33],
                  'AP Mean': '95.51 ± 0.70', 'Time taken (per run) Mean': [49.854]},
        'NS': {'AUC': [98.73328, 99.05363, 96.71799, 98.59875, 98.33968],
               'AP': [98.74139, 99.18278, 97.08523, 98.84595, 98.58699],
               'Time taken (per run)': [46.07, 47.63, 46.38, 45.22, 45.13], 'AUC Mean': [98.29],
               'AP Mean': '98.49 ± 0.73', 'Time taken (per run) Mean': [46.086]},
        'Router': {'AUC': [94.4352, 94.50995, 92.94157, 93.65184, 93.31174],
                   'AP': [94.61816, 94.73476, 93.09708, 93.62221, 93.31918],
                   'Time taken (per run)': [106.34, 108.5, 109.64, 117.8, 106.33], 'AUC Mean': [93.77],
                   'AP Mean': '93.88 ± 0.67', 'Time taken (per run) Mean': [109.72200000000001]},
        'Celegans': {'AUC': [85.56424, 89.80042, 90.19128, 87.54476, 84.6777],
                     'AP': [82.77593, 89.91013, 90.18201, 85.42368, 84.34281],
                     'Time taken (per run)': [47.26, 47.55, 49.23, 47.72, 48.83], 'AUC Mean': [87.56],
                     'AP Mean': '86.53 ± 3.00', 'Time taken (per run) Mean': [48.117999999999995]},
        'Power': {'AUC': [81.97192, 85.18344, 80.27303, 80.92928, 83.27731],
                  'AP': [84.3661, 87.17045, 83.54128, 84.43698, 85.56634],
                  'Time taken (per run)': [106.6, 107.66, 111.11, 107.24, 109.11], 'AUC Mean': [82.33],
                  'AP Mean': '85.02 ± 1.26', 'Time taken (per run) Mean': [108.34400000000001]},
        'PB': {'AUC': [93.8847, 93.91041, 94.1514, 95.17026, 95.11776],
               'AP': [93.22128, 93.77026, 94.09861, 94.65199, 94.70702],
               'Time taken (per run)': [914.92, 902.74, 926.46, 933.23, 934.68], 'AUC Mean': [94.45],
               'AP Mean': '94.09 ± 0.56', 'Time taken (per run) Mean': [922.406]},
        'Ecoli': {'AUC': [96.65436, 97.01659, 96.41715, 97.11984, 96.43688],
                  'AP': [97.36127, 97.52658, 97.14449, 97.63747, 97.23006],
                  'Time taken (per run)': [880.64, 885.44, 871.75, 900.89, 899.38], 'AUC Mean': [96.73],
                  'AP Mean': '97.38 ± 0.18', 'Time taken (per run) Mean': [887.6199999999999]},
        'Yeast': {'AUC': [96.61124, 97.53165, 96.53027, 97.22668, 97.4603],
                  'AP': [97.14936, 98.01507, 97.38606, 97.77152, 97.88756],
                  'Time taken (per run)': [248.78, 247.81, 238.8, 244.76, 240.34], 'AUC Mean': [97.07],
                  'AP Mean': '97.64 ± 0.32', 'Time taken (per run) Mean': [244.098]}
    }


if __name__ == '__main__':
    # multi-line graph plots for hyperparameter tuning results
    slice_length = len(HyperTunerResults.m)
    # colors = ['b', 'g', 'r', 'm', 'c', 'y', 'k', 'w']
    cmap = [plt.cm.get_cmap("Reds"), plt.cm.get_cmap("Greens")]
    slicedCM = [cmap[0](np.linspace(0.4, 0.75, slice_length)), cmap[1](np.linspace(0.5, 0.8, slice_length))]
    # line_style = ['solid', 'dotted', 'dashed', 'dashdot', ]
    line_style = [('solid', 'solid'),
                  ('dotted', 'dotted'),
                  ('dashed', 'dashed'),
                  ('dashdot', 'dashdot'),
                  ('dashdotdotted', (0, (3, 5, 1, 5, 1, 5)))]
    marker_style = ['D', 's', 'o', '^', '*']
    seal_colors = ['midnightblue', 'darkgreen', ]

    for dataset, results in HyperTunerResults.RESULTS_NON.items():
        all_auc = results['AUC_MEAN']
        all_ap = results['AP_MEAN']
        all_times = results['Time_MEAN']

        auc_m_results = [all_auc[i:i + slice_length] for i in range(0, len(all_auc), slice_length)]
        time_m_results = [all_times[i:i + slice_length] for i in range(0, len(all_times), slice_length)]

        HyperTunerResults.RESULTS_NON[dataset].update(
            {'auc_m_results': auc_m_results, 'time_m_results': time_m_results}
        )

    ylimit = [85, 92, 83, 60, 60, 80, 85, 88]
    skip_axis = [1, 1, 1, 4, 4, 2, 1, 1]

    for index, (dataset, results) in enumerate(HyperTunerResults.RESULTS_NON.items()):
        f = plt.figure()
        x = HyperTunerResults.M
        default_x_ticks = range(len(x))
        plt.rcParams.update({'font.size': 16.5})
        plt.xticks(default_x_ticks, x)
        plt.yticks(np.arange(0, 100, skip_axis[index]))
        plt.ylim(ylimit[index])
        # SEAL line
        auc_SEAL_results = HyperTunerResults.SEAL[dataset]['AUC Mean'] * 5
        plt.plot(default_x_ticks, auc_SEAL_results, label=f"SEAL h=2", color=seal_colors[0],
                 linestyle='-', linewidth=2, markersize=10)

        auc_m_results = results['auc_m_results']

        for inner_index, m_values in enumerate(auc_m_results):
            plt.plot(default_x_ticks, m_values, label=f"ScaLed h={HyperTunerResults.m[inner_index]}",
                     color=slicedCM[0][inner_index],
                     linestyle=line_style[inner_index][1], marker=marker_style[inner_index], linewidth=2, markersize=10)

        plt.ylabel('AUC Scores')
        plt.xlabel('k: Number of Walks')
        plt.legend(loc="lower right", ncol=2, borderpad=0.2, labelspacing=0.25, borderaxespad=0.25)
        plt.tight_layout()
        plt.show()
        f.savefig(f"{dataset}_hypertuner_auc.pdf", bbox_inches='tight')

    ylimit = [22, 35, 40, 25, 90, 0, 0, 100]
    max_limit = [60, 60, 130, 55, 125, 1000, 1000, 300]
    skip_axis = [5, 2, 5, 4, 4, 120, 120, 20]

    for index, (dataset, results) in enumerate(HyperTunerResults.RESULTS_NON.items()):
        f = plt.figure()
        x = HyperTunerResults.M
        default_x_ticks = range(len(x))
        plt.rcParams.update({'font.size': 16.5})
        plt.xticks(default_x_ticks, x)
        plt.yticks(np.arange(0, max_limit[index], skip_axis[index]))
        plt.ylim(ylimit[index])
        # SEAL line
        auc_SEAL_results = HyperTunerResults.SEAL[dataset]['Time taken (per run) Mean'] * 5
        plt.plot(default_x_ticks, auc_SEAL_results, label=f"SEAL h=2", color=seal_colors[0],
                 linestyle='-', linewidth=2, markersize=10)

        auc_m_results = results['time_m_results']

        for inner_index, m_values in enumerate(auc_m_results):
            plt.plot(default_x_ticks, m_values, label=f"ScaLed h={HyperTunerResults.m[inner_index]}",
                     color=slicedCM[0][inner_index],
                     linestyle=line_style[inner_index][1], marker=marker_style[inner_index], linewidth=2, markersize=10)

        plt.ylabel('Runtime (sec)')
        plt.xlabel('k: Number of Walks')
        plt.legend(loc="lower right", ncol=2, borderpad=0.2, labelspacing=0.25, borderaxespad=0.25)
        plt.tight_layout()
        plt.show()
        f.savefig(f"{dataset}_hypertuner_time.pdf", bbox_inches='tight')
